/*
 * All split to multiple functions, we can test each of them separately and reuse
 * validation functions elsewhere.
 *
 * Possible improvements: regexp pattern should be configurable from a property file/environment variable
 */

void processRegistration(String email, String age) throws UserValidationException {
  //validate email address format with regexp matcher
  validateEmail(email);

  //validate age format
  int ageInt = parseAge(age);

  //registration steps...
}

void validateEmail(String email) throws UserValidationException {
  String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
  Pattern p = Pattern.compile(ePattern);
  Matcher m = p.matcher(email);
  if (!m.matches()) {
    throw new UserValidationException("Email address is not in correct format.");
  }
}

int parseAge(String age) throws UserValidationException {
  try {
    int ageInt = Integer.parseInt(age);

    if(ageInt < 0) {
      throw new UserValidationException(age + " cannot be lower than 0!");
    }

  } catch (NumberFormatException e) {
    throw new UserValidationException(age + " is not a valid number!");
  }
}
